// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_5fdata_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_test_5fdata_2eproto;
class MapFieldEntry;
struct MapFieldEntryDefaultTypeInternal;
extern MapFieldEntryDefaultTypeInternal _MapFieldEntry_default_instance_;
class ProtoTestData;
struct ProtoTestDataDefaultTypeInternal;
extern ProtoTestDataDefaultTypeInternal _ProtoTestData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::MapFieldEntry* Arena::CreateMaybeMessage<::MapFieldEntry>(Arena*);
template <>
::ProtoTestData* Arena::CreateMaybeMessage<::ProtoTestData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class MapFieldEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapFieldEntry) */ {
 public:
  inline MapFieldEntry() : MapFieldEntry(nullptr) {}
  ~MapFieldEntry() override;
  explicit PROTOBUF_CONSTEXPR MapFieldEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapFieldEntry(const MapFieldEntry& from);
  MapFieldEntry(MapFieldEntry&& from) noexcept
    : MapFieldEntry() {
    *this = ::std::move(from);
  }

  inline MapFieldEntry& operator=(const MapFieldEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapFieldEntry& operator=(MapFieldEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapFieldEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapFieldEntry* internal_default_instance() {
    return reinterpret_cast<const MapFieldEntry*>(
               &_MapFieldEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapFieldEntry& a, MapFieldEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MapFieldEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapFieldEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapFieldEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapFieldEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapFieldEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapFieldEntry& from) {
    MapFieldEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapFieldEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MapFieldEntry";
  }
  protected:
  explicit MapFieldEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string Key = 1;
  bool has_key() const;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // required int32 Value = 2;
  bool has_value() const;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MapFieldEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::int32_t value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fdata_2eproto;
};// -------------------------------------------------------------------

class ProtoTestData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTestData) */ {
 public:
  inline ProtoTestData() : ProtoTestData(nullptr) {}
  ~ProtoTestData() override;
  explicit PROTOBUF_CONSTEXPR ProtoTestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoTestData(const ProtoTestData& from);
  ProtoTestData(ProtoTestData&& from) noexcept
    : ProtoTestData() {
    *this = ::std::move(from);
  }

  inline ProtoTestData& operator=(const ProtoTestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoTestData& operator=(ProtoTestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoTestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoTestData* internal_default_instance() {
    return reinterpret_cast<const ProtoTestData*>(
               &_ProtoTestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoTestData& a, ProtoTestData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoTestData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoTestData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoTestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoTestData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoTestData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtoTestData& from) {
    ProtoTestData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTestData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ProtoTestData";
  }
  protected:
  explicit ProtoTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldFieldNumber = 5,
    kMapFieldFieldNumber = 6,
    kStrFieldFieldNumber = 4,
    kInt64FieldFieldNumber = 2,
    kDoubleFieldFieldNumber = 3,
    kIntFieldFieldNumber = 1,
  };
  // repeated int32 VectorField = 5;
  int vectorfield_size() const;
  private:
  int _internal_vectorfield_size() const;

  public:
  void clear_vectorfield() ;
  ::int32_t vectorfield(int index) const;
  void set_vectorfield(int index, ::int32_t value);
  void add_vectorfield(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& vectorfield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_vectorfield();

  private:
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_vectorfield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_vectorfield();

  public:
  // repeated .MapFieldEntry MapField = 6;
  int mapfield_size() const;
  private:
  int _internal_mapfield_size() const;

  public:
  void clear_mapfield() ;
  ::MapFieldEntry* mutable_mapfield(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapFieldEntry >*
      mutable_mapfield();
  private:
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MapFieldEntry>& _internal_mapfield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MapFieldEntry>* _internal_mutable_mapfield();
  public:
  const ::MapFieldEntry& mapfield(int index) const;
  ::MapFieldEntry* add_mapfield();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapFieldEntry >&
      mapfield() const;
  // required string StrField = 4;
  bool has_strfield() const;
  void clear_strfield() ;
  const std::string& strfield() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strfield(Arg_&& arg, Args_... args);
  std::string* mutable_strfield();
  PROTOBUF_NODISCARD std::string* release_strfield();
  void set_allocated_strfield(std::string* ptr);

  private:
  const std::string& _internal_strfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strfield(
      const std::string& value);
  std::string* _internal_mutable_strfield();

  public:
  // required int64 Int64Field = 2;
  bool has_int64field() const;
  void clear_int64field() ;
  ::int64_t int64field() const;
  void set_int64field(::int64_t value);

  private:
  ::int64_t _internal_int64field() const;
  void _internal_set_int64field(::int64_t value);

  public:
  // required double DoubleField = 3;
  bool has_doublefield() const;
  void clear_doublefield() ;
  double doublefield() const;
  void set_doublefield(double value);

  private:
  double _internal_doublefield() const;
  void _internal_set_doublefield(double value);

  public:
  // required int32 IntField = 1;
  bool has_intfield() const;
  void clear_intfield() ;
  ::int32_t intfield() const;
  void set_intfield(::int32_t value);

  private:
  ::int32_t _internal_intfield() const;
  void _internal_set_intfield(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ProtoTestData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> vectorfield_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapFieldEntry > mapfield_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strfield_;
    ::int64_t int64field_;
    double doublefield_;
    ::int32_t intfield_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MapFieldEntry

// required string Key = 1;
inline bool MapFieldEntry::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MapFieldEntry::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MapFieldEntry::key() const {
  // @@protoc_insertion_point(field_get:MapFieldEntry.Key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapFieldEntry::set_key(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MapFieldEntry.Key)
}
inline std::string* MapFieldEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:MapFieldEntry.Key)
  return _s;
}
inline const std::string& MapFieldEntry::_internal_key() const {
  return _impl_.key_.Get();
}
inline void MapFieldEntry::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* MapFieldEntry::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* MapFieldEntry::release_key() {
  // @@protoc_insertion_point(field_release:MapFieldEntry.Key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MapFieldEntry::set_allocated_key(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MapFieldEntry.Key)
}

// required int32 Value = 2;
inline bool MapFieldEntry::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MapFieldEntry::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MapFieldEntry::value() const {
  // @@protoc_insertion_point(field_get:MapFieldEntry.Value)
  return _internal_value();
}
inline void MapFieldEntry::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MapFieldEntry.Value)
}
inline ::int32_t MapFieldEntry::_internal_value() const {
  return _impl_.value_;
}
inline void MapFieldEntry::_internal_set_value(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// ProtoTestData

// required int32 IntField = 1;
inline bool ProtoTestData::has_intfield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ProtoTestData::clear_intfield() {
  _impl_.intfield_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ProtoTestData::intfield() const {
  // @@protoc_insertion_point(field_get:ProtoTestData.IntField)
  return _internal_intfield();
}
inline void ProtoTestData::set_intfield(::int32_t value) {
  _internal_set_intfield(value);
  // @@protoc_insertion_point(field_set:ProtoTestData.IntField)
}
inline ::int32_t ProtoTestData::_internal_intfield() const {
  return _impl_.intfield_;
}
inline void ProtoTestData::_internal_set_intfield(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.intfield_ = value;
}

// required int64 Int64Field = 2;
inline bool ProtoTestData::has_int64field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProtoTestData::clear_int64field() {
  _impl_.int64field_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t ProtoTestData::int64field() const {
  // @@protoc_insertion_point(field_get:ProtoTestData.Int64Field)
  return _internal_int64field();
}
inline void ProtoTestData::set_int64field(::int64_t value) {
  _internal_set_int64field(value);
  // @@protoc_insertion_point(field_set:ProtoTestData.Int64Field)
}
inline ::int64_t ProtoTestData::_internal_int64field() const {
  return _impl_.int64field_;
}
inline void ProtoTestData::_internal_set_int64field(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.int64field_ = value;
}

// required double DoubleField = 3;
inline bool ProtoTestData::has_doublefield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProtoTestData::clear_doublefield() {
  _impl_.doublefield_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ProtoTestData::doublefield() const {
  // @@protoc_insertion_point(field_get:ProtoTestData.DoubleField)
  return _internal_doublefield();
}
inline void ProtoTestData::set_doublefield(double value) {
  _internal_set_doublefield(value);
  // @@protoc_insertion_point(field_set:ProtoTestData.DoubleField)
}
inline double ProtoTestData::_internal_doublefield() const {
  return _impl_.doublefield_;
}
inline void ProtoTestData::_internal_set_doublefield(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.doublefield_ = value;
}

// required string StrField = 4;
inline bool ProtoTestData::has_strfield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProtoTestData::clear_strfield() {
  _impl_.strfield_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoTestData::strfield() const {
  // @@protoc_insertion_point(field_get:ProtoTestData.StrField)
  return _internal_strfield();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtoTestData::set_strfield(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strfield_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoTestData.StrField)
}
inline std::string* ProtoTestData::mutable_strfield() {
  std::string* _s = _internal_mutable_strfield();
  // @@protoc_insertion_point(field_mutable:ProtoTestData.StrField)
  return _s;
}
inline const std::string& ProtoTestData::_internal_strfield() const {
  return _impl_.strfield_.Get();
}
inline void ProtoTestData::_internal_set_strfield(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strfield_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoTestData::_internal_mutable_strfield() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strfield_.Mutable( GetArenaForAllocation());
}
inline std::string* ProtoTestData::release_strfield() {
  // @@protoc_insertion_point(field_release:ProtoTestData.StrField)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strfield_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strfield_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ProtoTestData::set_allocated_strfield(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strfield_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strfield_.IsDefault()) {
          _impl_.strfield_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoTestData.StrField)
}

// repeated int32 VectorField = 5;
inline int ProtoTestData::_internal_vectorfield_size() const {
  return _impl_.vectorfield_.size();
}
inline int ProtoTestData::vectorfield_size() const {
  return _internal_vectorfield_size();
}
inline void ProtoTestData::clear_vectorfield() {
  _internal_mutable_vectorfield()->Clear();
}
inline ::int32_t ProtoTestData::vectorfield(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTestData.VectorField)
  return _internal_vectorfield().Get(index);
}
inline void ProtoTestData::set_vectorfield(int index, ::int32_t value) {
  _internal_mutable_vectorfield()->Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoTestData.VectorField)
}
inline void ProtoTestData::add_vectorfield(::int32_t value) {
  _internal_mutable_vectorfield()->Add(value);
  // @@protoc_insertion_point(field_add:ProtoTestData.VectorField)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ProtoTestData::vectorfield() const {
  // @@protoc_insertion_point(field_list:ProtoTestData.VectorField)
  return _internal_vectorfield();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ProtoTestData::mutable_vectorfield() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTestData.VectorField)
  return _internal_mutable_vectorfield();
}

inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ProtoTestData::_internal_vectorfield() const {
  return _impl_.vectorfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ProtoTestData::_internal_mutable_vectorfield() {
  return &_impl_.vectorfield_;
}

// repeated .MapFieldEntry MapField = 6;
inline int ProtoTestData::_internal_mapfield_size() const {
  return _impl_.mapfield_.size();
}
inline int ProtoTestData::mapfield_size() const {
  return _internal_mapfield_size();
}
inline void ProtoTestData::clear_mapfield() {
  _internal_mutable_mapfield()->Clear();
}
inline ::MapFieldEntry* ProtoTestData::mutable_mapfield(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTestData.MapField)
  return _internal_mutable_mapfield()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapFieldEntry >*
ProtoTestData::mutable_mapfield() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTestData.MapField)
  return _internal_mutable_mapfield();
}
inline const ::MapFieldEntry& ProtoTestData::mapfield(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTestData.MapField)
    return _internal_mapfield().Get(index);
}
inline ::MapFieldEntry* ProtoTestData::add_mapfield() {
  ::MapFieldEntry* _add = _internal_mutable_mapfield()->Add();
  // @@protoc_insertion_point(field_add:ProtoTestData.MapField)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapFieldEntry >&
ProtoTestData::mapfield() const {
  // @@protoc_insertion_point(field_list:ProtoTestData.MapField)
  return _internal_mapfield();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MapFieldEntry>&
ProtoTestData::_internal_mapfield() const {
  return _impl_.mapfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::MapFieldEntry>*
ProtoTestData::_internal_mutable_mapfield() {
  return &_impl_.mapfield_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto_2epb_2eh
