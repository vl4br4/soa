// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_data.proto

#include "test_data.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
PROTOBUF_CONSTEXPR MapFieldEntry::MapFieldEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ 0
} {}
struct MapFieldEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapFieldEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapFieldEntryDefaultTypeInternal() {}
  union {
    MapFieldEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapFieldEntryDefaultTypeInternal _MapFieldEntry_default_instance_;
PROTOBUF_CONSTEXPR ProtoTestData::ProtoTestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vectorfield_)*/ {}

  , /*decltype(_impl_.mapfield_)*/{}
  , /*decltype(_impl_.strfield_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.int64field_)*/ ::int64_t{0}

  , /*decltype(_impl_.doublefield_)*/ 0

  , /*decltype(_impl_.intfield_)*/ 0
} {}
struct ProtoTestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoTestDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoTestDataDefaultTypeInternal() {}
  union {
    ProtoTestData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoTestDataDefaultTypeInternal _ProtoTestData_default_instance_;
static ::_pb::Metadata file_level_metadata_test_5fdata_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_test_5fdata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_test_5fdata_2eproto = nullptr;
const ::uint32_t TableStruct_test_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::MapFieldEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MapFieldEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MapFieldEntry, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::MapFieldEntry, _impl_.value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _impl_.intfield_),
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _impl_.int64field_),
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _impl_.doublefield_),
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _impl_.strfield_),
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _impl_.vectorfield_),
    PROTOBUF_FIELD_OFFSET(::ProtoTestData, _impl_.mapfield_),
    3,
    1,
    2,
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::MapFieldEntry)},
        { 12, 26, -1, sizeof(::ProtoTestData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_MapFieldEntry_default_instance_._instance,
    &::_ProtoTestData_default_instance_._instance,
};
const char descriptor_table_protodef_test_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017test_data.proto\"+\n\rMapFieldEntry\022\013\n\003Ke"
    "y\030\001 \002(\t\022\r\n\005Value\030\002 \002(\005\"\223\001\n\rProtoTestData"
    "\022\020\n\010IntField\030\001 \002(\005\022\022\n\nInt64Field\030\002 \002(\003\022\023"
    "\n\013DoubleField\030\003 \002(\001\022\020\n\010StrField\030\004 \002(\t\022\023\n"
    "\013VectorField\030\005 \003(\005\022 \n\010MapField\030\006 \003(\0132\016.M"
    "apFieldEntry"
};
static ::absl::once_flag descriptor_table_test_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_5fdata_2eproto = {
    false,
    false,
    212,
    descriptor_table_protodef_test_5fdata_2eproto,
    "test_data.proto",
    &descriptor_table_test_5fdata_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_test_5fdata_2eproto::offsets,
    file_level_metadata_test_5fdata_2eproto,
    file_level_enum_descriptors_test_5fdata_2eproto,
    file_level_service_descriptors_test_5fdata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_5fdata_2eproto_getter() {
  return &descriptor_table_test_5fdata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_5fdata_2eproto(&descriptor_table_test_5fdata_2eproto);
// ===================================================================

class MapFieldEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MapFieldEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapFieldEntry, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MapFieldEntry::MapFieldEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MapFieldEntry)
}
MapFieldEntry::MapFieldEntry(const MapFieldEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapFieldEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:MapFieldEntry)
}

inline void MapFieldEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) { 0 }

  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapFieldEntry::~MapFieldEntry() {
  // @@protoc_insertion_point(destructor:MapFieldEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapFieldEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void MapFieldEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapFieldEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:MapFieldEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  _impl_.value_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapFieldEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "MapFieldEntry.Key");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MapFieldEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapFieldEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string Key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "MapFieldEntry.Key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required int32 Value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapFieldEntry)
  return target;
}

::size_t MapFieldEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MapFieldEntry)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string Key = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 Value = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  return total_size;
}
::size_t MapFieldEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MapFieldEntry)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Key = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());

    // required int32 Value = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapFieldEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapFieldEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapFieldEntry::GetClassData() const { return &_class_data_; }


void MapFieldEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapFieldEntry*>(&to_msg);
  auto& from = static_cast<const MapFieldEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MapFieldEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapFieldEntry::CopyFrom(const MapFieldEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MapFieldEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFieldEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MapFieldEntry::InternalSwap(MapFieldEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);

  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapFieldEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fdata_2eproto_getter, &descriptor_table_test_5fdata_2eproto_once,
      file_level_metadata_test_5fdata_2eproto[0]);
}
// ===================================================================

class ProtoTestData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoTestData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProtoTestData, _impl_._has_bits_);
  static void set_has_intfield(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int64field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_doublefield(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strfield(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ProtoTestData::ProtoTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoTestData)
}
ProtoTestData::ProtoTestData(const ProtoTestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoTestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vectorfield_) { from._impl_.vectorfield_ }

    , decltype(_impl_.mapfield_){from._impl_.mapfield_}
    , decltype(_impl_.strfield_) {}

    , decltype(_impl_.int64field_) {}

    , decltype(_impl_.doublefield_) {}

    , decltype(_impl_.intfield_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.strfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strfield_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strfield_.Set(from._internal_strfield(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.int64field_, &from._impl_.int64field_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.intfield_) -
    reinterpret_cast<char*>(&_impl_.int64field_)) + sizeof(_impl_.intfield_));
  // @@protoc_insertion_point(copy_constructor:ProtoTestData)
}

inline void ProtoTestData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vectorfield_) { arena }

    , decltype(_impl_.mapfield_){arena}
    , decltype(_impl_.strfield_) {}

    , decltype(_impl_.int64field_) { ::int64_t{0} }

    , decltype(_impl_.doublefield_) { 0 }

    , decltype(_impl_.intfield_) { 0 }

  };
  _impl_.strfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strfield_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoTestData::~ProtoTestData() {
  // @@protoc_insertion_point(destructor:ProtoTestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoTestData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vectorfield_.~RepeatedField();
  _internal_mutable_mapfield()->~RepeatedPtrField();
  _impl_.strfield_.Destroy();
}

void ProtoTestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoTestData::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTestData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vectorfield()->Clear();
  _internal_mutable_mapfield()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strfield_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.int64field_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.intfield_) -
        reinterpret_cast<char*>(&_impl_.int64field_)) + sizeof(_impl_.intfield_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoTestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 IntField = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_intfield(&has_bits);
          _impl_.intfield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 Int64Field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_int64field(&has_bits);
          _impl_.int64field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required double DoubleField = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_doublefield(&has_bits);
          _impl_.doublefield_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // required string StrField = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_strfield();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ProtoTestData.StrField");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 VectorField = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_mutable_vectorfield()->Add(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vectorfield(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .MapFieldEntry MapField = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_mutable_mapfield()->Add(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProtoTestData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTestData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 IntField = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_intfield(), target);
  }

  // required int64 Int64Field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_int64field(), target);
  }

  // required double DoubleField = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_doublefield(), target);
  }

  // required string StrField = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strfield();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "ProtoTestData.StrField");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated int32 VectorField = 5;
  for (int i = 0, n = this->_internal_vectorfield_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_vectorfield().Get(i), target);
  }

  // repeated .MapFieldEntry MapField = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mapfield_size()); i < n; i++) {
    const auto& repfield = this->_internal_mapfield().Get(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTestData)
  return target;
}

::size_t ProtoTestData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoTestData)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string StrField = 4;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_strfield());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int64 Int64Field = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_int64field());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required double DoubleField = 3;
    total_size += 9;
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required int32 IntField = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_intfield());
  }

  return total_size;
}
::size_t ProtoTestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTestData)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string StrField = 4;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_strfield());

    // required int64 Int64Field = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_int64field());

    // required double DoubleField = 3;
    total_size += 9;

    // required int32 IntField = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_intfield());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 VectorField = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_vectorfield())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_vectorfield_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated .MapFieldEntry MapField = 6;
  total_size += 1UL * this->_internal_mapfield_size();
  for (const auto& msg : this->_internal_mapfield()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoTestData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoTestData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoTestData::GetClassData() const { return &_class_data_; }


void ProtoTestData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoTestData*>(&to_msg);
  auto& from = static_cast<const ProtoTestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoTestData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vectorfield_.MergeFrom(from._impl_.vectorfield_);
  _this->_internal_mutable_mapfield()->MergeFrom(from._internal_mapfield());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strfield(from._internal_strfield());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.int64field_ = from._impl_.int64field_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.doublefield_ = from._impl_.doublefield_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.intfield_ = from._impl_.intfield_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoTestData::CopyFrom(const ProtoTestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTestData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_mapfield()))
    return false;
  return true;
}

void ProtoTestData::InternalSwap(ProtoTestData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vectorfield_.InternalSwap(&other->_impl_.vectorfield_);
  _internal_mutable_mapfield()->InternalSwap(other->_internal_mutable_mapfield());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strfield_, lhs_arena,
                                       &other->_impl_.strfield_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoTestData, _impl_.intfield_)
      + sizeof(ProtoTestData::_impl_.intfield_)
      - PROTOBUF_FIELD_OFFSET(ProtoTestData, _impl_.int64field_)>(
          reinterpret_cast<char*>(&_impl_.int64field_),
          reinterpret_cast<char*>(&other->_impl_.int64field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoTestData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fdata_2eproto_getter, &descriptor_table_test_5fdata_2eproto_once,
      file_level_metadata_test_5fdata_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MapFieldEntry*
Arena::CreateMaybeMessage< ::MapFieldEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MapFieldEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTestData*
Arena::CreateMaybeMessage< ::ProtoTestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoTestData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
